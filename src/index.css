@import "tailwindcss";

/* -------------------------------------------------------------------------- */
/* 1. Global Theme Variables                         */
/* -------------------------------------------------------------------------- */

:root {
  /* Colors - Light Theme (Default) */
  --color-text-base: 17, 24, 39; /* text-gray-900 */
  --color-text-reverse: 243, 244, 246; /* text-gray-100 for dark text on light bg */
  --color-bg-body: 249, 250, 251; /* bg-gray-50 - Used for the main page background/fade */
  --color-bg-card: 255, 255, 255; /* bg-white - Used for internal panels/containers */
  --color-primary-accent: 59, 130, 246; /* Accent color (e.g., blue-500) */
  --color-border-base: 229, 231, 235; /* gray-200 */
  --color-fade-overlay: 255, 255, 255; /* The color of the fading gradient on the body (usually matches --color-bg-body) */

  --color-premium-yellow: 255, 193, 7; /* amber-100 - For premium features */
  --color-premium-yellow-light: 255, 243, 205; /* amber-200 - Lighter shade for hover effects */

  /* Specific Components */
  --loading-shine-alpha: 0.2; /* Opacity of the loading animation shine */
  --role-color: 59, 130, 246; /* Blue-500 - For premium checkbox */

  /* Mesh Background Gradient (Static Blue for Light/Dark in this example) */
  --mesh-color-1: 96, 165, 250; /* blue-400 */
  --mesh-color-2: 96, 165, 250; /* blue-400 */
  --mesh-color-3: 59, 130, 246; /* blue-500 */

  /* Rotating Border Colors (Fixed Rainbow for flair) */
  --rotating-border-c1: 255, 0, 0, 0.3;
  --rotating-border-c2: 0, 255, 0, 0.3;
  --rotating-border-c3: 0, 0, 255, 0.3;
  --rotating-border-c4: 255, 0, 255, 0.3;
  --rotating-border-c5: 0, 255, 255, 0.3;
  --rotating-border-c6: 255, 255, 0, 0.3;
}

/* -------------------------------------------------------------------------- */
/* 2. Dark Theme Overrides                         */
/* -------------------------------------------------------------------------- */

body.dark {
  --color-text-base: 243, 244, 246; /* text-gray-100 */
  --color-text-reverse: 17, 24, 39; /* text-gray-900 for light text on dark bg */
  --color-bg-body: 15, 15, 20; /* dark blue */
  --color-bg-card: 31, 41, 55; /* bg-gray-800 */
  --color-primary-accent: 147, 197, 253; /* Blue-300 for contrast */
  --color-border-base: 55, 65, 81; /* gray-700 */
  --color-fade-overlay: 17, 24, 39; /* Should match the dark body background */

  --color-premium-yellow: 255, 193, 7; /* amber-300 - For premium features */

  /* Specific Components */
  --loading-shine-alpha: 0.1;
  --role-color: 147, 197, 253; /* Blue-300 for dark mode accent */

  /* Mesh Background - Optional change for dark theme */
  --mesh-color-1: 31, 41, 55;
  --mesh-color-2: 55, 65, 81;
  --mesh-color-3: 17, 24, 39;
}


/* -------------------------------------------------------------------------- */
/* 3. Themed CSS Logic                             */
/* -------------------------------------------------------------------------- */

#root,
html,
body {
  overflow: hidden;
  overflow-y: auto;
}

#root {
  display: flex;
  justify-content: center;
}

.customBackground {
  overflow: hidden;
  position: relative;
}
/* NOTE: Image URLs are kept as they are static assets, not theme-related colors. */
.customBackground::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: url("../src/assets/images/cover_bg.png");
  background-size: cover;
}

.customBackground::after {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: black;
  opacity: 0.3;
}

body {
  margin: 0;
  background-color: rgb(var(--color-bg-body));
  color: rgb(var(--color-text-base));
  transition: background-color 0.3s, color 0.3s;
  position: relative; /* creates a stacking context */
  z-index: 0;         /* puts body content above ::before/::after */
  min-height: 100vh;
  overflow-x: hidden;
}

body::before {
  content: "";
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;

  background-image: url("../src/assets/images/musicbg.png");
  background-size: 400px;
  background-repeat: repeat;

  opacity: 0.1;
  z-index: -2; /* safely behind everything */
}
body.dark::before{
  background-blend-mode: difference;
  opacity: 1;
}

body::after {
  content: "";
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;

  background: linear-gradient(
    to bottom,
    rgb(var(--color-fade-overlay)) 50%,
    transparent 100%
  );

  z-index: -1; /* above ::before, below content */
}
html {
  -webkit-text-size-adjust: 100%;
  text-size-adjust: 100%;
}
img {
  max-width: none !important;
}

/* Animations (Kept as is - not theme related) */
@keyframes move-out {
  from {
    opacity: 1;
    transform: translateY(0);
  }
  to {
    opacity: 0.5;
    transform: translateY(-35%);
  }
}

@keyframes move-in {
  from {
    clip-path: polygon(0% 100%, 100% 100%, 100% 100%, 0% 100%);
  }
  to {
    clip-path: polygon(0% 100%, 100% 0%, 100% 0%, 0% 0%);
  }
}

/* Apply the move-in animation when the page is entering */
.page-container.entering {
  animation: move-in 1.5s cubic-bezier(0.87, 0, 0.13, 1) both;
}

/* Apply the move-out animation when the page is exiting */
.page-container.exiting {
  animation: move-out 1.5s cubic-bezier(0.87, 0, 0.13, 1) both;
}

/* Default page container styles */
.page-container {
  position: absolute;
  width: 100vw !important;
  height: 100vh !important;
}

.animate-down {
  animation: loadDown 0.5s cubic-bezier(0.87, 0, 0.13, 1);
}

.animate-down-start {
  animation: loadDown 1s cubic-bezier(0.87, 0, 0.13, 1);
}

@keyframes loadDown {
  from {
    transform: translateY(-50%);
    opacity: 0;
  }
  to {
    transform: translateY(0%);
    opacity: 1;
  }
}

.animate-left {
  animation: loadLeft 1s cubic-bezier(0.175, 0.885, 0.32, 1.275);
}
.animate-left-normal {
  animation: loadLeft 1s linear;
}
@keyframes loadLeft {
  from {
    transform: translateX(-50%);
    opacity: 0;
  }
  to {
    transform: translateX(0%);
    opacity: 1;
  }
}

.animate-right {
  animation: loadRight 1s cubic-bezier(0.175, 0.885, 0.32, 1.275);
}
.animate-right-normal {
  animation: loadRight 1s linear;
}
@keyframes loadRight {
  from {
    transform: translateX(500px);
    opacity: 0;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}
.animation-delay-200 {
  animation-delay: 500ms;
}
.animate-appear {
  animation: appear 2s cubic-bezier(0.175, 0.885, 0.32, 1.275);
}
@keyframes appear {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

/* This uses the theme's background color variable */
.gradient-overlay {
  background: linear-gradient(
    transparent,
    rgba(var(--color-bg-card), 0.25),
    rgb(var(--color-bg-card))
  );
}

/* This uses the theme's mesh color variables */
.meshBg {
  background: rgb(var(--mesh-color-3));
  background: radial-gradient(
    circle,
    rgb(var(--mesh-color-1)) 19%,
    rgb(var(--mesh-color-2)) 31%,
    rgb(var(--mesh-color-3)) 85%
  );
}

.loading-animation {
  position: relative;
  overflow: hidden;
}
/* This uses the theme's card color and alpha variable */
.loading-animation::before {
  content: "";
  position: absolute;
  width: 15%;
  height: 100%;
  top: 0;
  background: rgba(var(--color-bg-card), var(--loading-shine-alpha));
  filter: blur(10px);
  transform: skew(-10deg);
  animation: loadingData 2s cubic-bezier(0.175, 0.885, 0.32, 1.275) infinite;
}

@keyframes loadingData {
  from {
    left: -10%;
  }
  to {
    left: 110%;
  }
}

.loading-box {
  animation: LoadingBox 1s cubic-bezier(0.175, 0.885, 0.32, 1.275) alternate
    infinite;
}

@keyframes LoadingBox {
  from {
    opacity: 0.5;
  }
  to {
    opacity: 1;
  }
}

/* This uses the theme's card color variable */
.rotatingBorder {
  position: relative;
  z-index: 0;
  outline: 2px solid transparent;
  background: rgb(var(--color-bg-card));
  border-radius: 8px;
}
/* This uses the theme's card color variable */
.rotatingBorder::after {
  content: "";
  position: absolute;
  inset: 0;
  background: rgb(var(--color-bg-card));
  border-radius: 10px;
  z-index: -1;
}
/* This uses the fixed rotating border variables (can be customized per theme) */
.rotatingBorder::before {
  content: "";
  position: absolute;
  top: -4px;
  left: -4px;
  right: -4px;
  bottom: -4px;
  background: linear-gradient(
    45deg,
    rgba(var(--rotating-border-c1)),
    rgba(var(--rotating-border-c2)),
    rgba(var(--rotating-border-c3)),
    rgba(var(--rotating-border-c4)),
    rgba(var(--rotating-border-c5)),
    rgba(var(--rotating-border-c6)),
    rgba(var(--rotating-border-c1))
  );
  background-size: 400% 400%;
  /* Blur the background */
  filter: blur(8px);
  border-radius: 10px;
  z-index: -1;
  animation: rotateBorder 10s linear infinite;
}

@keyframes rotateBorder {
  0% {
    background-position: 0% 50%;
  }
  100% {
    background-position: 400% 50%;
  }
}

.paymentStatusDialog {
  .p-dialog-content {
    padding: 1rem 1.5rem 2rem 1.5rem;
  }
}

.expandBox{
  animation: expandFrom 1s cubic-bezier(0.175, 0.885, 0.32, 1.275);
}

@keyframes expandFrom {
  0%,70% {
    transform: scale(0);
    opacity: 0;
  }
  100% {
    transform: scale(1);
    opacity: 1;
  }
}

.p-dialog-mask {
  z-index: 2000 !important;
}
.p-dialog {
  z-index: 2001 !important;
}
.modal {
  z-index: 3000 !important; /* or less if you want dialogs on top */
}

[data-rmiz-modal-overlay="visible"] {
  background-color: rgba(0, 0, 0, 0.3) !important;
  backdrop-filter: blur(5px);
}

.lyrics-searchBox {
  .p-autocomplete-input {
    width: 100%;
  }
}

.custom-checkbox .p-checkbox-box {
  width: 1.5rem; /* Adjust checkbox size */
  height: 1.5rem;
  border-radius: 4px;
}

/* This uses the theme's role color variable */
.custom-checkbox.p-checkbox-checked .p-checkbox-box {
  background-color: rgb(var(--role-color)) !important;
  border-color: rgb(var(--role-color)) !important;
}

@keyframes wave {
  0% {
    transform: rotate(0deg);
  }
  15% {
    transform: rotate(15deg);
  }
  30% {
    transform: rotate(-10deg);
  }
  45% {
    transform: rotate(10deg);
  }
  60% {
    transform: rotate(-5deg);
  }
  75% {
    transform: rotate(5deg);
  }
  100% {
    transform: rotate(0deg);
  }
}

.customHeader {
  padding: 0.5rem 1rem !important;
  border: none !important;
  .p-dialog-title {
    font-size: medium !important;
  }
  .p-dialog-header-icons {
    align-self: center !important;
  }
}
.customContent {
  padding: 0.75rem 1rem !important;
  border: none !important;
}

.glitching {
  /* animation: glitching 5s infinite; */
}

@keyframes glitching {
  0%,
  5%,
  10%,
  15%,
  20%,
  25%,
  30% {
    transform: translateX(-1px);
  }
  2%,
  7%,
  12%,
  17%,
  22%,
  27%,
  32% {
    transform: translateX(1px);
  }
  50%,
  100% {
    transform: translateX(0);
  }
}

.lyrics-wrapper {
  padding-left: 1.5rem; /* base = 24px */
  padding-right: 1.5rem;
  padding-top: 1rem;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  gap: 1rem;
}

/* Tablet (768px and up) */
@media (min-width: 768px) {
  .lyrics-wrapper {
    padding-left: 1rem; /* 16px */
    padding-right: 1rem;
    padding-top: 4rem;
    gap: 2rem;
  }
}

/* Desktop (1024px and up) */
@media (min-width: 1024px) {
  .lyrics-width {
    width: 100%;
    max-width: 800px; /* Adjust as needed */
  }
  .lyrics-wrapper {
    padding-left: 6rem; /* 96px */
    padding-right: 6rem;
  }
}

.checkbox-fade {
  opacity: 0;
  animation: fadeIn 2s forwards;
}
@keyframes fadeIn {
  to {
    opacity: 1;
  }
}

.gradientTitle {
  font-weight: 700;
}

/* -------------------------------------------------------------------------- */
/* 3. Custom Classes                                                          */
/* -------------------------------------------------------------------------- */
.c-bg{
  background-color: rgb(var(--color-fade-overlay)) !important;
}

.c-primary{
  background-color: rgb(var(--color-primary-accent)) !important;
}

.c-reverse{
  color: rgb(var(--color-text-reverse)) !important;
}

.c-bg-white{
  background-color: rgb(var(--color-bg-body)) !important;
}

.c-border{
  border-color: rgb(var(--color-border-base)) !important;
}

.c-text{
  color: rgb(var(--color-text-base)) !important;
}

.c-text-primary{
  color: rgb(var(--color-primary-accent)) !important;
}

.c-premium-bg{
  background: linear-gradient(90deg, rgb(var(--color-premium-yellow)), rgb(var(--color-premium-yellow-light))
  );
}